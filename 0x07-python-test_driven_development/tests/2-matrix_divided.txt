This fuction module defines a matrix division fuction: matrix_divided(matrix, div).

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [
...	[15, 12, 18],
...     [3, 3, 9]
... ]
>>> print(matrix_divided(matrix, 3))
[[5.0, 4.0, 6.0], [1.0, 1.0, 3.0]]


>>> matrix = [
...	[4, 5, 6],
...	[7, 8, 9]
... ]
>>> print(matrix_divided(matrix, 3))
[[1.33, 1.67, 2.0], [2.33, 2.67, 3.0]]


>>>  print(matrix)
[[1, 2, 3], [4, 5, 6]]


The fuction handles floating numbers.


>>> matrix = [
...	[1.1, 2.1, 3.1],
...	[4.1, 5.1, 6.2]
... ]
>>> print(matrix_divided(matrix, 2))
[[0.55, 1.05, 1.55], [2.05, 2.55, 3.10]]


The fuction raises error if values not numbers


>>> matrix = [
...	[1.1, "wewe"],
...	["wewe", 1]
... ]
>>> print(matrix_divided(matrix, 2))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

Each row of the matrix must be of the same size, otherwise raise a

>>> matrix = [
...	[1, 2, 3 ],
...	[1, 2, 3, 4]
... ]
>>> print(matrix_divided(matrix, 2))
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size


div must be a number (integer or float), otherwise raise a TypeError


>>> matrix = [
...	[1, 2, 3],
...	[4, 5, 6]
... ]
>>> print(matrix_divided(matrix, "none"))
Traceback (most recent call last):
TypeError: div must be a number

div canâ€™t be equal to 0, otherwise raise a ZeroDivisionError

>>> matrix = [
...	[1, 2, 3],
...	[4, 5, 6]
... ]
>>> print(matrix_divided(matrix, 0))
Traceback (most recent call last):
ZeroDivisionError: division by zero


matrix must be a list of lists 


>>> matrix = [4, 4, 6]
>>> print(matrix_divided(matrix, 3))
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
